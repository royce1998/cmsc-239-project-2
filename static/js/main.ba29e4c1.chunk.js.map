{"version":3,"sources":["Vis2.js","App.js","Vis1.js","Vis3.js","Vis4.js","Vis5.js","serviceWorker.js","example-chart.js","root.js","example-chart2.js","root2.js","index.js"],"names":["Vis2","Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loading","dataurl","_this2","csv","then","setState","keyOfInterest","_this3","_this$state","points_data","react_default","a","createElement","map","value","price","keys","className","build","style","background","margin","height","stroke","fill","type","strokeOpacity","strokeDasharray","key","console","log","onClick","Vis3","mkres10_raw","width","fillOpacity","Vis4","mkres10","limit","Vis5","mkres10_pred","Boolean","window","location","hostname","match","ExampleChart","props","array","month","indexOf","d","push","volume","preppedData","entries","_ref","_ref2","slicedToArray","size","es","animation","innerRadius","radius","getAngle","onValueMouseOver","v","onSeriesMouseOut","padAngle","RootComponent","example_chart_ExampleChart","React","displayName","ExampleChart2","mcap","RootComponent2","example_chart2_ExampleChart2","ReactDOM","render","root","document","getElementById","src_Vis2","src_Vis3","src_Vis4","src_Vis5","root2","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba29e4c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {csv} from 'd3-fetch';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\nimport {Sparklines, SparklinesLine, SparklinesSpots, SparklinesBars, SparklinesReferenceLine} from 'react-sparklines';\nimport Chart from 'chart.js';\n\n\nclass Vis2 extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n    this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n  }\n\n  componentWillMount() {\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n          keyOfInterest: 0\n        });\n      });\n  }\n\n  render() {\n    if (this.state.keyOfInterest == 0) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n    }\n    else if (this.state.keyOfInterest == 1) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/google_data.csv';\n    }\n    else {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/amazon_data.csv';\n    }\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n        });\n      });\n    const {loading, points_data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    const data = this.state.data.map(value => value.price);\n\n    const keys = [\"Facebook\", \"Google\", \"Amazon\"];\n    return (\n      <div className=\"App\">\n        <Sparklines data={data} style={{background: \"#00bdcc\"}} margin={10} height={60}>\n          <SparklinesLine style={{ stroke: \"white\", fill: \"none\" }} />\n          <SparklinesReferenceLine\n              type=\"mean\"\n              style={{ stroke: 'white', strokeOpacity: .75, strokeDasharray: '2, 2' }} />\n        </Sparklines>\n\n        {Object.keys(keys).map(key => {\n          console.log(this.state.keyOfInterest);\n          return (<button\n            key={key}\n            onClick={() => this.setState({keyOfInterest: key})}\n            >{keys[key]}</button>);\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Vis2;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {csv} from 'd3-fetch';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\nimport {Sparklines, SparklinesLine, SparklinesSpots, SparklinesBars} from 'react-sparklines';\n\n// function groupBy(data, key) {\n//   return data.reduce((acc, row) => {\n//     if (!acc[row[key]]) {\n//       acc[row[key]] = [];\n//     }\n//     acc[row[key]].push(row);\n//     return acc;\n//   }, {});\n// }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n  }\n\n  componentWillMount() {\n    csv('https://raw.githubusercontent.com/royce1998/Files/master/points_data.csv')\n      .then(data => {\n        this.setState({\n          data,\n          loading: false\n        });\n      });\n  }\n\n  render() {\n    const {loading, points_data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    const data = [\n      {x: 0, y: 8},\n      {x: 1, y: 5},\n      {x: 2, y: 4},\n      {x: 3, y: 9},\n      {x: 4, y: 1},\n      {x: 5, y: 7},\n      {x: 6, y: 6},\n      {x: 7, y: 3},\n      {x: 8, y: 2},\n      {x: 9, y: 0}\n    ];\n    const vis1data = this.state.data.map(value => value.points);\n    console.log(vis1data);\n    return (\n      <div className=\"App\">\n        <XYPlot height={300} width={300}>\n          <LineSeries data={data} />\n        </XYPlot>\n        <Sparklines data={vis1data}>\n          <SparklinesLine color=\"blue\" />\n        </Sparklines>\n\n      <Sparklines data={vis1data} limit={20}>\n          <SparklinesBars style={{ fill: \"#41c3f9\", fillOpacity: \".25\" }} />\n          <SparklinesLine style={{ stroke: \"#41c3f9\", fill: \"none\" }} />\n      </Sparklines>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {csv} from 'd3-fetch';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\nimport {Sparklines, SparklinesLine, SparklinesSpots, SparklinesBars} from 'react-sparklines';\n\n\n// function groupBy(data, key) {\n//   return data.reduce((acc, row) => {\n//     if (!acc[row[key]]) {\n//       acc[row[key]] = [];\n//     }\n//     acc[row[key]].push(row);\n//     return acc;\n//   }, {});\n// }\n\nclass Vis1 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n  }\n\n  componentWillMount() {\n    csv('https://raw.githubusercontent.com/royce1998/Files/master/points_data.csv')\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false\n        });\n      });\n  }\n\n  render() {\n\n    const {loading, points_data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    const vis1data = this.state.data.map(value => value.points);\n\n    console.log(vis1data);\n    return (\n      <div className=\"App\">\n        <Sparklines data={vis1data}>\n          <SparklinesLine color=\"blue\" />\n        </Sparklines>\n      </div>\n    );\n  }\n}\n\nexport default Vis1;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {csv} from 'd3-fetch';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\nimport {Sparklines, SparklinesLine, SparklinesSpots, SparklinesBars, SparklinesReferenceLine, SparklinesNormalBand} from 'react-sparklines';\nimport Chart from 'chart.js';\n\n\nclass Vis3 extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n    this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n  }\n\n  componentWillMount() {\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n          keyOfInterest: 0\n        });\n      });\n  }\n\n  render() {\n    if (this.state.keyOfInterest == 0) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n    }\n    else if (this.state.keyOfInterest == 1) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/google_data.csv';\n    }\n    else {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/amazon_data.csv';\n    }\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n        });\n      });\n    const {loading, points_data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    const data = this.state.data.map(value => value.mkres10_raw);\n\n    const keys = [\"Facebook\", \"Google\", \"Amazon\"];\n    return (\n      <div className=\"App\">\n\n        <Sparklines data={data} width={200}>\n            <SparklinesLine style={{ stroke: \"#2991c8\", fill: \"none\"}} />\n            <SparklinesNormalBand style={{ fill: \"#2991c8\", fillOpacity: .1 }} />\n        </Sparklines>\n\n        {Object.keys(keys).map(key => {\n          console.log(this.state.keyOfInterest);\n          return (<button\n            key={key}\n            onClick={() => this.setState({keyOfInterest: key})}\n            >{keys[key]}</button>);\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Vis3;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {csv} from 'd3-fetch';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\nimport {Sparklines, SparklinesLine, SparklinesSpots, SparklinesBars, SparklinesReferenceLine, SparklinesNormalBand} from 'react-sparklines';\nimport Chart from 'chart.js';\nimport TreeMap from \"react-d3-treemap\";\nimport \"react-d3-treemap/dist/react.d3.treemap.css\";\n\nclass Vis4 extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n    this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n  }\n\n  componentWillMount() {\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n          keyOfInterest: 0\n        });\n      });\n  }\n\n  render() {\n    if (this.state.keyOfInterest == 0) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n    }\n    else if (this.state.keyOfInterest == 1) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/google_data.csv';\n    }\n    else {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/amazon_data.csv';\n    }\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n        });\n      });\n    const {loading, points_data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    const data = this.state.data.map(value => value.mkres10);\n    const keys = [\"Facebook\", \"Google\", \"Amazon\"];\n    return (\n      <div className=\"App\">\n        <Sparklines data={data} limit={14}>\n            <SparklinesBars style={{ fill: \"#41c3f9\", fillOpacity: \".25\" }} />\n            <SparklinesLine style={{ stroke: \"#41c3f9\", fill: \"none\" }} />\n            <SparklinesReferenceLine\n                type=\"mean\"\n                style={{ stroke: 'red', strokeOpacity: .75, strokeDasharray: '2, 2' }} />\n        </Sparklines>\n        {Object.keys(keys).map(key => {\n          return (<button\n            key={key}\n            onClick={() => this.setState({keyOfInterest: key})}\n            >{keys[key]}</button>);\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Vis4;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {csv} from 'd3-fetch';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\nimport {Sparklines, SparklinesLine, SparklinesSpots, SparklinesBars, SparklinesReferenceLine, SparklinesNormalBand} from 'react-sparklines';\nimport Chart from 'chart.js';\nimport TreeMap from \"react-d3-treemap\";\nimport \"react-d3-treemap/dist/react.d3.treemap.css\";\nimport VictoryPie from 'victory';\n\nclass Vis5 extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n    this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n  }\n\n  componentWillMount() {\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n          keyOfInterest: 0\n        });\n      });\n  }\n\n  render() {\n    if (this.state.keyOfInterest == 0) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/facebook_data.csv';\n    }\n    else if (this.state.keyOfInterest == 1) {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/google_data.csv';\n    }\n    else {\n      this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/amazon_data.csv';\n    }\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n        });\n      });\n    const {loading, points_data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    const data = this.state.data.map(value => value.mkres10_pred);\n    const keys = [\"Facebook\", \"Google\", \"Amazon\"];\n    return (\n      <div className=\"App\">\n        <Sparklines data={data} limit={14}>\n            <SparklinesBars style={{ fill: \"#41c3f9\", fillOpacity: \".25\" }} />\n            <SparklinesLine style={{ stroke: \"#41c3f9\", fill: \"none\" }} />\n            <SparklinesReferenceLine\n                type=\"mean\"\n                style={{ stroke: 'red', strokeOpacity: .75, strokeDasharray: '2, 2' }} />\n        </Sparklines>\n        {Object.keys(keys).map(key => {\n          return (<button\n            key={key}\n            onClick={() => this.setState({keyOfInterest: key})}\n            >{keys[key]}</button>);\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Vis5;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\n\nimport {RadialChart, Hint} from 'react-vis';\n\n// function groupBy(data, key, month) {\n//\n//   const array = [];\n//\n//   key.map((d) => {\n//     array.push(data[d + month * 63].volume);\n//     });\n//   return array;\n// }\n\nexport default class ExampleChart extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: false,\n      keyOfInterest: 'February'\n    };\n  }\n\n  render() {\n    const {value, keyOfInterest} = this.state;\n    const {data} = this.props;\n    const companyKey = [\"Facebook\", \"Google\", \"Amazon\"]\n    const keys = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const array = [];\n    const month = keys.indexOf(keyOfInterest);\n    keys.indexOf(companyKey).map((d) => {\n      array.push(data[d + month * 63].volume);\n      });\n    const preppedData = Object.entries(array).map(([key, values]) => {\n      return {key, size: values};\n    });\n\n    return (\n      <div>\n        <RadialChart\n          animation\n          innerRadius={80}\n          radius={140}\n          getAngle={d => d.size}\n          data={preppedData}\n          onValueMouseOver={v => this.setState({value: v})}\n          onSeriesMouseOut={v => this.setState({value: false})}\n          width={300}\n          height={300}\n          padAngle={0.04}\n        >\n          {value !== false && <Hint value={value} />}\n        </RadialChart>\n        {Object.keys(keys).map(key => {\n          return (<button\n            key={key}\n            onClick={() => this.setState({keyOfInterest: keys[key]})}\n            >{keys[key]}</button>);\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {csv} from 'd3-fetch';\nimport ExampleChart from './example-chart';\n\nconst longBlock = `\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\nut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\nlaboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\nvoluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\nnon proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n`;\n\nclass RootComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n    this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/combined_data.csv';\n  }\n\n  componentWillMount() {\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    const {loading, data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    return (\n      <div className=\"relative\">\n        <ExampleChart data={data}/>\n      </div>\n    );\n  }\n}\nRootComponent.displayName = 'RootComponent';\nexport default RootComponent;\n","import React, {Component} from 'react';\n\nimport {RadialChart, Hint} from 'react-vis';\n\n// function groupBy(data, key, month) {\n//\n//   const array = [];\n//\n//   key.map((d) => {\n//     array.push(data[d + month * 63].mcap);\n//     });\n//   return array;\n// }\n\nexport default class ExampleChart2 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: false,\n      keyOfInterest: 'February'\n    };\n  }\n\n  render() {\n    const {value, keyOfInterest} = this.state;\n    const {data} = this.props;\n    const companyKey = [\"Facebook\", \"Google\", \"Amazon\"]\n    const keys = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const array = [];\n    const month = keys.indexOf(keyOfInterest);\n    keys.indexOf(companyKey).map((d) => {\n      array.push(data[d + month * 63].mcap);\n      });\n    const preppedData = Object.entries(array).map(([key, values]) => {\n      return {key, size: values};\n    });\n\n    return (\n      <div>\n        <RadialChart\n          animation\n          innerRadius={10}\n          radius={140}\n          getAngle={d => d.size}\n          data={preppedData}\n          onValueMouseOver={v => this.setState({value: v})}\n          onSeriesMouseOut={v => this.setState({value: false})}\n          width={300}\n          height={300}\n          padAngle={0.04}\n        >\n          {value !== false && <Hint value={value} />}\n        </RadialChart>\n        {Object.keys(keys).map(key => {\n          return (<button\n            key={key}\n            onClick={() => this.setState({keyOfInterest: keys[key]})}\n            >{keys[key]}</button>);\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {csv} from 'd3-fetch';\nimport ExampleChart2 from './example-chart2';\n\nconst longBlock = `\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\nut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\nlaboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\nvoluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\nnon proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n`;\n\nclass RootComponent2 extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      loading: true\n    };\n    this.dataurl = 'https://raw.githubusercontent.com/royce1998/Files/master/combined_data.csv';\n  }\n\n  componentWillMount() {\n    csv(this.dataurl)\n      .then(data => {\n        this.setState({\n          data: data,\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    const {loading, data} = this.state;\n    if (loading) {\n      return <h1>LOADING</h1>;\n    }\n    return (\n      <div className=\"relative\">\n        <ExampleChart2 data={data}/>\n      </div>\n    );\n  }\n}\nRootComponent2.displayName = 'RootComponent';\nexport default RootComponent2;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Vis1 from './Vis1';\nimport Vis2 from './Vis2';\nimport Vis3 from './Vis3';\nimport Vis4 from './Vis4';\nimport Vis5 from './Vis5';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './root.js';\nimport RootComponent2 from './root2.js';\n\n//ReactDOM.render(<Root />, document.getElementById('app'));\nReactDOM.render(<Root />, document.getElementById('vis1'));\n//ReactDOM.render(<Vis1 />, document.getElementById('vis1'));\nReactDOM.render(<Vis2 />, document.getElementById('vis3'));\nReactDOM.render(<Vis3 />, document.getElementById('vis4'));\nReactDOM.render(<Vis4 />, document.getElementById('vis5'));\nReactDOM.render(<Vis5 />, document.getElementById('vis6'));\nReactDOM.render(<RootComponent2 />, document.getElementById('vis2'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}